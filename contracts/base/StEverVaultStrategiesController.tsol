pragma ever-solidity >=0.62.0;

import "./StEverVaultBase.tsol";
import "./StEverVaultEmergency.tsol";
import "./StEverStrategiesManager.tsol";

import "../interfaces/IStrategy.tsol";




abstract contract StEverVaultStrategiesController is StEverVaultBase, StEverVaultEmergency, StEverStrategiesManager  {
    /// @dev function for depositing to strategies, function can be called recursively in case of mapping contains more than 50 elements
    /// @param _depositConfigs - mapping of strategy address to deposit config
    function depositToStrategies(mapping (address => DepositConfig) _depositConfigs) override external onlyGovernanceOrSelfAndAccept {
        uint256 chunkSize = 50;

        for (uint256 i = 0; i < chunkSize && !_depositConfigs.empty(); i++) {

            (address strategy, DepositConfig depositConfig) = _depositConfigs.delMin().get();

            // calculate required amount to send
            uint128 valueToSend = depositConfig.amount + depositConfig.fee;
            if (!canTransferValue(valueToSend)) {
                emit ProcessDepositToStrategyError(strategy, ErrorCodes.NOT_ENOUGH_VALUE_TO_DEPOSIT);
                continue;
            }

            if (!strategies.exists(strategy)) {
                emit ProcessDepositToStrategyError(strategy, ErrorCodes.STRATEGY_NOT_EXISTS);
                continue;
            }

            if (depositConfig.amount < minStrategyDepositValue) {
                emit ProcessDepositToStrategyError(strategy, ErrorCodes.BAD_DEPOSIT_TO_STRATEGY_VALUE);
                continue;
            }

            if (totalAssets < depositConfig.fee) {
                emit ProcessDepositToStrategyError(strategy, ErrorCodes.NOT_ENOUGH_TOTAL_ASSETS);
                continue;
            }

            if (!isStrategyInInitialState(strategy, false)) {
                emit ProcessDepositToStrategyError(strategy, ErrorCodes.STRATEGY_NOT_IN_INITIAL_STATE);
                continue;
            }


            // change depositing strategy state
            strategies[strategy].depositingAmount = depositConfig.amount;

            // reduce availableAssets
            availableAssets -= valueToSend;

            // grab fee from total assets, then add it back after receiving response from strategy

            decreaseTotalAssets(depositConfig.fee);
            IStrategy(strategy).deposit{value: depositConfig.amount + depositConfig.fee, bounce: false}(uint64(depositConfig.amount));
        }
        if (!_depositConfigs.empty()) {
            this.depositToStrategies{value: StEverVaultGas.SEND_SELF_VALUE, bounce: false}(_depositConfigs);
        }
    }
    /// @dev callback function that is calling by strategy after depositing
    function onStrategyHandledDeposit() override external onlyStrategy {
        uint128 depositingAmount = strategies[msg.sender].depositingAmount;
        // set init state for depositing
        strategies[msg.sender].depositingAmount = 0;

        // calculate remaining gas
        uint128 returnedFee = (msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE);
        updateTotalAssetsForStrategy(msg.sender, depositingAmount, true);
        // add fee back
        availableAssets += returnedFee;
        increaseTotalAssets(returnedFee);
        emit StrategyHandledDeposit(msg.sender, depositingAmount);
    }
    /// @dev callback function that is calling by strategy after failed depositing
    function onStrategyDidntHandleDeposit(uint32 _errcode) override external onlyStrategy {
        uint128 depositingAmount = strategies[msg.sender].depositingAmount;
        // set init state for depositing
        strategies[msg.sender].depositingAmount = 0;

        availableAssets += msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE;

        // add fee back to total assets
        if (depositingAmount > msg.value) {
            // if depositing amount gt msg.value therefore we spent more than attached fee
            decreaseTotalAssets(depositingAmount - msg.value + StEverVaultGas.HANDLING_STRATEGY_CB_FEE);
        }
        if (msg.value > depositingAmount) {
            increaseTotalAssets(msg.value - depositingAmount - StEverVaultGas.HANDLING_STRATEGY_CB_FEE);
        }
        emit StrategyDidntHandleDeposit(msg.sender, _errcode);
    }


    /// @dev function is used by strategies for reporting after each each round it doesn't caries any value, only information.
    /// @param _gain - amount of gain
    /// @param _loss - amount of loss
    /// @param _totalAssets - total assets of strategy
    /// @param _requestedBalance - if strategy balance became less than threshold, strategy will request balance
    function strategyReport(uint128 _gain, uint128 _loss, uint128 _totalAssets, uint128 _requestedBalance) override external onlyStrategy {

        strategies[msg.sender].lastReport = now;
        strategies[msg.sender].totalGain += _gain;

        uint128 stEverFee = math.muldiv(_gain, stEverFeePercent, Constants.ONE_HUNDRED_PERCENT);
        totalStEverFee += stEverFee;
        uint128 gainWithoutStEverFee = _gain - stEverFee;


        // if gain less than the fee, therefore, we shouldn't increase total assets
        uint128 gainWithoutGainFee = gainWithoutStEverFee > gainFee ?
        gainWithoutStEverFee - gainFee :
        0;

        increaseTotalAssets(gainWithoutGainFee);

        if (gainWithoutGainFee > 0) {
            if (unlockPerSecond == 0) {
                unlockPerSecond = gainWithoutGainFee / fullUnlockSeconds;
                remainingLockedAssets = gainWithoutGainFee;
                remainingSeconds = fullUnlockSeconds;
            } else {
                remainingSeconds =
                    (remainingLockedAssets * remainingSeconds + gainWithoutGainFee * fullUnlockSeconds) /
                        (remainingLockedAssets + gainWithoutGainFee);

                remainingLockedAssets += gainWithoutGainFee;

                unlockPerSecond = remainingLockedAssets / remainingSeconds;
            }
        }
        unlockAssets();

        ///
        updateTotalAssetsForStrategy(msg.sender, gainWithoutGainFee, true);

        emit StrategyReported(msg.sender, StrategyReport(gainWithoutGainFee, _loss, _totalAssets));


        uint128 sendValueToStrategy;
        if (_requestedBalance > 0 && canTransferValue(_requestedBalance)) {
            decreaseTotalAssets(_requestedBalance);
            availableAssets -= _requestedBalance;
            sendValueToStrategy = _requestedBalance;
        }
        tvm.rawReserve(_reserveWithValue(sendValueToStrategy), 0);
        msg.sender.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }

    /// @dev function for withdrawing from strategies, function can be called recursively in case of mapping contains more than 50 elements
    /// @param _withdrawConfig - mapping of strategy address to withdraw config
    function processWithdrawFromStrategies(mapping (address => WithdrawConfig) _withdrawConfig) override external onlyGovernanceOrSelfAndAccept {
        uint256 chunkSize = 50;

        for (uint256 i = 0; i < chunkSize && !_withdrawConfig.empty(); i++) {
            (address strategy, WithdrawConfig config) = _withdrawConfig.delMin().get();

            if (config.amount < minStrategyWithdrawValue) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.BAD_WITHDRAW_FROM_STRATEGY_VALUE);
                continue;
            }

            if (!strategies.exists(strategy)) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.STRATEGY_NOT_EXISTS);
                continue;
            }

            if (config.fee < StEverVaultGas.MIN_WITHDRAW_FROM_STRATEGY_FEE) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.BAD_WITHDRAW_FROM_STRATEGY_FEE);
                continue;
            }

            if (!canTransferValue(config.fee)) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.NOT_ENOUGH_VALUE_TO_WITHDRAW);
                continue;
            }

            if (!isStrategyInInitialState(strategy, true)) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.STRATEGY_NOT_IN_INITIAL_STATE);
                continue;
            }

            if (totalAssets < config.fee) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.NOT_ENOUGH_TOTAL_ASSETS);
                continue;
            }

            // grab fee, then add it back after receiving response from strategy
            availableAssets -= config.fee;

            decreaseTotalAssets(config.fee);
            // change withdrawing strategy state
            strategies[strategy].withdrawingAmount = config.amount;

            IStrategy(strategy).withdraw{value:config.fee, bounce: false}(uint64(config.amount));
        }
        if (!_withdrawConfig.empty()) {
            this.processWithdrawFromStrategies{value: StEverVaultGas.SEND_SELF_VALUE, bounce:false}(_withdrawConfig);
        }
    }

    /// @dev callback function that is calling by strategy after accepting withdraw request
    function onStrategyHandledWithdrawRequest() override external onlyStrategy {

        emit StrategyHandledWithdrawRequest(msg.sender, strategies[msg.sender].withdrawingAmount);

        if (isEmergencyProcess()) {
            tvm.rawReserve(_reserve(), 0);

            emergencyState.emitter.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
            return;
        }
        // set back remaining gas after withdraw request
        availableAssets += msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE;
        increaseTotalAssets(msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE);
    }


    /// @dev Method for situation when dePool is stopped emit new rounds, and our deposit there is in the Pooling round
    /// @param _withdrawConfig - mapping of strategy address to withdraw config
    function forceWithdrawFromStrategies(mapping (address => WithdrawConfig) _withdrawConfig) override external onlyGovernanceOrSelfAndAccept {
        uint256 chunkSize = 50;
        for (uint256 i = 0; i < chunkSize && !_withdrawConfig.empty(); i++) {
            (address strategy, WithdrawConfig config) = _withdrawConfig.delMin().get();

            if (!strategies.exists(strategy)) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.STRATEGY_NOT_EXISTS);
                continue;
            }

            if (!canTransferValue(config.fee)) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.NOT_ENOUGH_VALUE_TO_WITHDRAW);
                continue;
            }

            if (totalAssets < config.fee) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.NOT_ENOUGH_TOTAL_ASSETS);
                continue;
            }

            // grab fee, then add it back after receiving response from strategy
            availableAssets -= config.fee;
            decreaseTotalAssets(config.fee);

            // change withdrawing strategy state
            strategies[strategy].withdrawingAmount = config.amount;

            IStrategy(strategy).withdrawForce{value:config.fee, bounce: false}(uint64(config.amount));
        }
        if (!_withdrawConfig.empty()) {
            this.forceWithdrawFromStrategies{value: StEverVaultGas.SEND_SELF_VALUE, bounce: false}(_withdrawConfig);
        }
    }
    /// @dev callback function that caries requested value, that was requested by `processWithdrawFromStrategies` or `forceWithdrawFromStrategies`
    function receiveFromStrategy() override external onlyStrategy {
        // set init state for withdrawing
        strategies[msg.sender].withdrawingAmount = 0;

        uint128 receivedAmount = msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE;

        updateTotalAssetsForStrategy(msg.sender, msg.value, false);

        availableAssets += receivedAmount;

        emit StrategyWithdrawSuccess(msg.sender, receivedAmount);

        if (isStrategyReadyToDelete(msg.sender)) {
            removeStrategy(msg.sender);
        }
    }
    /// @dev fallback method for handling unexpected value
    function receiveAdditionalTransferFromStrategy() override external onlyStrategy {
        uint128 receivedAmount = msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE;

        availableAssets += receivedAmount;
        updateTotalAssetsForStrategy(msg.sender, msg.value, false);

        if (isStrategyReadyToDelete(msg.sender)) {
            removeStrategy(msg.sender);
        }

        emit ReceiveAdditionalTransferFromStrategy(msg.sender, receivedAmount);
    }
    /// @dev function for checking if strategy is ready to delete
    /// @param _strategy - strategy address
    function isStrategyReadyToDelete(address _strategy) internal view returns(bool) {
        StrategyParams strategy = strategies[_strategy];
        return strategy.state == StrategyState.REMOVING && strategy.totalAssets == 0;
    }
    /// @dev function for updating total assets for strategy
    /// @param _strategy - strategy address
    /// @param _amount - amount of assets
    /// @param _isIncrease - if true, then increase total assets, otherwise decrease
    function updateTotalAssetsForStrategy(address _strategy, uint128 _amount, bool _isIncrease) internal {

        if (_isIncrease) {
            uint128 correctedAmount = _amount >= Constants.INCREASE_STRATEGY_TOTAL_ASSETS_CORRECTION ?
            _amount - Constants.INCREASE_STRATEGY_TOTAL_ASSETS_CORRECTION :
            0;

            strategies[_strategy].totalAssets += correctedAmount;
            return;
        }

        uint128 currentStrategyAssets = strategies[_strategy].totalAssets;

        if (_amount >= currentStrategyAssets) {
            strategies[_strategy].totalAssets = 0;
            return;
        }

        strategies[_strategy].totalAssets -= _amount;

    }
    /// @dev callback function that is calling by strategy after failed withdraw request
    /// @param _errcode - error code
    function withdrawFromStrategyError(uint32 _errcode) override external onlyStrategy {
        emit StrategyWithdrawError(msg.sender, _errcode);
        // set init state for withdrawing
        strategies[msg.sender].withdrawingAmount = 0;

        if (isEmergencyProcess()) {
            tvm.rawReserve(_reserve(), 0);

            emergencyState.emitter.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
            return;
        }
        // calculate remaining gas
        uint128 notUsedFee = msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE;

        // set remaining gas
        availableAssets += notUsedFee;
        increaseTotalAssets(notUsedFee);
    }

    /// @dev function for withdrawing extra money from strategies
    /// @param _strategies - array of strategy addresses
    function processWithdrawExtraMoneyFromStrategies(address[] _strategies) override external onlyGovernanceOrSelfAndAccept {

        for (address strategy : _strategies) {
            if (!strategies.exists(strategy)) {
                emit ProcessWithdrawExtraMoneyFromStrategyError(strategy, ErrorCodes.STRATEGY_NOT_EXISTS);
                continue;
            }

            if (!canTransferValue(StEverVaultGas.MIN_CALL_MSG_VALUE)) {
                emit ProcessWithdrawExtraMoneyFromStrategyError(strategy, ErrorCodes.NOT_ENOUGH_VALUE);
                continue;
            }

            availableAssets -= StEverVaultGas.MIN_CALL_MSG_VALUE;

            IStrategy(strategy).withdrawExtraMoney{value: StEverVaultGas.MIN_CALL_MSG_VALUE, bounce: false}();
        }
    }
    /// @dev callback function that is calling by strategy after withdrawing extra money
    function receiveExtraMoneyFromStrategy() override external onlyStrategy {
        uint128 receivedValue = msg.value > StEverVaultGas.HANDLING_STRATEGY_CB_FEE
            ? msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE
            : 0;

        availableAssets += receivedValue;

        uint128 availableAssetsIncreasedFor = receivedValue > StEverVaultGas.MIN_CALL_MSG_VALUE
            ? receivedValue - StEverVaultGas.MIN_CALL_MSG_VALUE
            : 0;

        emit ReceiveExtraMoneyFromStrategy(msg.sender, availableAssetsIncreasedFor);
    }

    //@dev migration function
    function setStrategiesTotalAssets(
        IStEverVault.SetStrategyTotalAssetsConfig[] _totalAssetsConfig
    ) override external onlyOwner minCallValue {
        tvm.rawReserve(_reserve(), 0);
        for (IStEverVault.SetStrategyTotalAssetsConfig strategyTotalAssetsConfig : _totalAssetsConfig) {
            (address strategy, uint128 _strategyTotalAssets) = strategyTotalAssetsConfig.unpack();
            require(strategies.exists(strategy));

            strategies[strategy].totalAssets = _strategyTotalAssets >= Constants.INCREASE_STRATEGY_TOTAL_ASSETS_CORRECTION ?
            _strategyTotalAssets - Constants.INCREASE_STRATEGY_TOTAL_ASSETS_CORRECTION :
            _strategyTotalAssets;

            if (isStrategyReadyToDelete(strategy)) {
                removeStrategy(strategy);
            }
        }

        owner.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }

    function forceStrategyRemove(address _strategy, address _cluster) override external onlyOwner {
        require(
            msg.value >= StEverVaultGas.REMOVE_STRATEGY_RESERVE + Constants.MIN_TRANSACTION_VALUE,
            ErrorCodes.NOT_ENOUGH_VALUE
        );

        tvm.rawReserve(_reserve(), 0);

        if (!strategies.exists(_strategy)) {
            IStEverCluster(_cluster).onStrategyRemoved{
                    value: StEverVaultGas.REMOVE_STRATEGY_RESERVE,
                    bounce: false
            }(_strategy);
        }

        msg.sender.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }

}
