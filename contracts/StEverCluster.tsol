pragma ever-solidity >=0.62.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "broxus-ton-tokens-contracts/contracts/interfaces/IAcceptTokensTransferCallback.tsol";
import "broxus-ton-tokens-contracts/contracts/interfaces/ITokenRoot.tsol";
import "broxus-ton-tokens-contracts/contracts/interfaces/ITokenWallet.tsol";
import "broxus-ton-tokens-contracts/contracts/interfaces/IDestroyable.tsol";
import "./interfaces/IStEverCluster.tsol";
import "./interfaces/IStEverVault.tsol";
import "./interfaces/IDepoolStrategyFactory.tsol";
import "./utils/Gas.tsol";
import "./utils/ErrorCodes.tsol";



contract StEverCluster is IStEverCluster, IAcceptTokensTransferCallback {

    uint32 _nonce;
    address stEverVault;
    address clusterOwner;
    address stEverOwner;

    uint128 requiredAssurance;
    uint32 maxStrategiesCount;
    uint32 currentVersion;
    address strategyFactory;

    uint128 currentAssurance;
    ClusterState clusterState;

    address stEverTokenRoot;
    address stEverTokenWallet;

    bool isPunished;

    mapping(address => Strategy) public strategies;
    mapping(address => bool) public deployedStrategies;

    constructor() public {revert();}
    /// @dev this function is using instead of constructor
    /// @param _version - initial cluster version
    /// @param _assurance - initial cluster assurance
    /// @param _maxStrategiesCount - max strategies count
    /// @param _strategyFactory - address of strategy factory
    /// @param _stEverTokenRoot - address of stEver token root
    /// @param _stEverOwner - address of stEver owner
    function _init(
        uint32 _version,
        uint128 _assurance,
        uint32 _maxStrategiesCount,
        address _strategyFactory,
        address _stEverTokenRoot,
        address _stEverOwner
    ) internal {
        requiredAssurance = _assurance;
        maxStrategiesCount = _maxStrategiesCount;
        currentVersion = _version;
        strategyFactory = _strategyFactory;
        stEverTokenRoot = _stEverTokenRoot;
        clusterState = ClusterState.INITIAL;
        stEverOwner = _stEverOwner;

        ITokenRoot(stEverTokenRoot).deployWallet{
                value: StEverVaultGas.ST_EVER_WALLET_DEPLOY_VALUE,
                callback: StEverCluster.handleStEverTokenWalletAddress,
                bounce: false
        }(address(this), StEverVaultGas.ST_EVER_WALLET_DEPLOY_GRAMS_VALUE);
    }

    function _reserve() internal pure returns (uint128) {
        return math.max(address(this).balance - msg.value, ClusterGas.CONTRACT_MIN_BALANCE);
    }

    modifier onlyStEverVault() {
        require(msg.sender == stEverVault,ErrorCodesCluster.NOT_ST_EVER_VAULT);
        _;
    }
    modifier onlyStEverOwner() {
        require(msg.sender == stEverOwner,ErrorCodesCluster.NOT_ST_EVER_OWNER);
        _;
    }
    modifier onlyClusterOwner() {
        require(msg.sender == clusterOwner, ErrorCodesCluster.NOT_CLUSTER_OWNER);
        _;
    }
    modifier stEverOwnerOrClusterOwner() {
        require(msg.sender == stEverOwner || msg.sender == clusterOwner, ErrorCodesCluster.NOT_ST_EVER_OWNER_OR_CLUSTER_OWNER);
        _;
    }
    modifier onlyStrategyFactory() {
        require(msg.sender == strategyFactory, ErrorCodesCluster.NOT_STRATEGY_FACTORY);
        _;
    }
    modifier minCallValue() {
        require (msg.value >= ClusterGas.MIN_CALL_VALUE, ErrorCodesCluster.LOW_MSG_VALUE);
        _;
    }

    function handleStEverTokenWalletAddress(address _tokenWallet) public {
        require (msg.sender == stEverTokenRoot, ErrorCodesCluster.NOT_ST_EVER_ROOT);
        stEverTokenWallet = _tokenWallet;
    }
    /// @dev function for setting stEverOwner address
    function setStEverOwner(address _newStEverOwner) external override onlyStEverVault {
        tvm.rawReserve(_reserve(), 0);
        stEverOwner = _newStEverOwner;
        clusterOwner.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }
    /// @dev function for deploying strategies by given dePools
    /// @param _dePools - array of dePools addresses
    function deployStrategies(address[] _dePools) override external onlyClusterOwner {
        uint128 valueForDeployOneStrategy = ClusterGas.STRATEGY_DEPLOY_VALUE  + ClusterGas.MIN_CALL_VALUE;
        uint128 requiredMsgValue = valueForDeployOneStrategy * uint128(_dePools.length) + ClusterGas.MIN_CALL_VALUE;
        require (msg.value >= requiredMsgValue, ErrorCodesCluster.LOW_MSG_VALUE);
        tvm.rawReserve(_reserve(), 0);

        for(address dePool : _dePools) {
            IDepoolStrategyFactory(strategyFactory).deployStrategy{
                value: valueForDeployOneStrategy,
                flag: MsgFlag.SENDER_PAYS_FEES,
                bounce: false
            }(dePool);
        }
        clusterOwner.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }
    /// @dev callback function from strategy
    /// @param _strategy - address of deployed strategy
    function onStrategyDeployed(address _strategy) override external onlyStrategyFactory {
        tvm.rawReserve(_reserve(), 0);

        deployedStrategies[_strategy] = true;

        emit NewStrategyDeployed(_strategy);

        clusterOwner.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }


    /// @dev function for adding strategies to cluster
    /// @param _strategies - array of strategies addresses
    function addStrategies(address[] _strategies) public view onlyClusterOwner {

        if (currentAssurance < requiredAssurance) {
            revert(ErrorCodesCluster.ASSURANCE_NOT_ENOUGH);
        }

        if (strategies.keys().length + _strategies.length > maxStrategiesCount) {
            revert(ErrorCodesCluster.STRATEGIES_LIMIT_REACHED);
        }

        require (
            msg.value >= _strategies.length * StEverVaultGas.EXPERIMENTAL_FEE + StEverVaultGas.MIN_CALL_MSG_VALUE,
            ErrorCodes.NOT_ENOUGH_VALUE
        );

        uint8 batchSize = 50;

        require (_strategies.length <= batchSize, ErrorCodes.MAX_BATCH_SIZE_REACHED);

        tvm.rawReserve(_reserve(), 0);

        for (address strategy : _strategies) {

            if (strategies.exists(strategy)) {
                revert(ErrorCodesCluster.STRATEGY_ALREADY_EXISTS);
            }
            if (!deployedStrategies.exists(strategy)) {
                revert(ErrorCodesCluster.STRATEGY_NOT_DEPLOYED_BY_CLUSTER);
            }
        }

        IStEverVault(stEverVault).addStrategies{
            value: uint128(_strategies.length) * StEverVaultGas.EXPERIMENTAL_FEE,
            flag: MsgFlag.SENDER_PAYS_FEES,
            bounce: false
        }(_strategies, clusterOwner, _nonce);

        clusterOwner.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }

    /// @dev callback function from stEverVault
    /// @param _strategies - array of strategies addresses
    function onStrategiesAdded(address[] _strategies) override external onlyStEverVault {
        tvm.rawReserve(_reserve(), 0);

        for (address strategy : _strategies) {
            strategies[strategy].state = StrategyState.ACTIVE;
        }

        clusterOwner.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }

    /// @dev function for removing strategies from cluster
    /// @param _strategies - array of strategies addresses
    function removeStrategies(address[] _strategies) public stEverOwnerOrClusterOwner {

        require(
            msg.value >= uint128(_strategies.length) * (StEverVaultGas.REMOVE_STRATEGY_RESERVE + StEverVaultGas.EXPERIMENTAL_FEE),
            ErrorCodesCluster.NOT_ENOUGH_VALUE
        );

        for (address strategy : _strategies) {
            require(strategies.exists(strategy), ErrorCodesCluster.STRATEGY_NOT_EXISTS);
            require(strategies[strategy].state == StrategyState.ACTIVE, ErrorCodesCluster.STRATEGY_NOT_IN_ACTIVE_STATE);
        }

        _removeStrategies(_strategies);
    }

    function _removeStrategies(address[] _strategies) internal {
        tvm.rawReserve(_reserve(), 0);


        for (address strategy : _strategies) {
            strategies[strategy].state = StrategyState.REMOVING;
        }

        IStEverVault(stEverVault).removeStrategies{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }(_strategies, clusterOwner, _nonce);
    }

    /// @dev callback function from stEverVault that confirming pending remove strategies
    /// @param _strategies - array of strategies addresses
    function onPendingStrategyRemove(address[] _strategies) override external onlyStEverVault {
        tvm.rawReserve(_reserve(), 0);

        for (address strategy : _strategies) {
            strategies[strategy].state = StrategyState.PENDING_REMOVE;
        }

        address remainingGasTo = isPunished ? stEverOwner : clusterOwner;

        remainingGasTo.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }
    /// @dev callback function from stEverVault that confirmed remove strategies
    /// @param _strategy - array of strategies addresses
    function onStrategyRemoved(address _strategy) override external onlyStEverVault {

        uint128 callBackMsgValue = 0.2 ever;

        delete strategies[_strategy];
        uint256 strategiesCount = strategies.keys().length;
        if (clusterState == ClusterState.REMOVING && strategiesCount == 0) {

            IStEverVault(stEverVault).onClusterRemoved{value: callBackMsgValue, bounce: false}(clusterOwner, _nonce);
            if (currentAssurance != 0) {
                address assuranceTo = isPunished ? stEverOwner : clusterOwner;
                TvmCell empty;
                // send remaining tokens
                ITokenWallet(stEverTokenWallet).transfer{value: callBackMsgValue, bounce: false}(
                    currentAssurance,
                    assuranceTo,
                    0,
                    assuranceTo,
                    false,
                    empty
                );
                // destroy wallet
                IDestroyable(stEverTokenWallet).destroy{value: callBackMsgValue, bounce: false}(assuranceTo);
            }
            // self destruct
            clusterOwner.transfer({
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.DESTROY_IF_ZERO,
                bounce: false
            });
            return;
        }
        tvm.rawReserve(_reserve(), 0);
        clusterOwner.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }

    /// @dev function for migrating from version without clusters to version with clusters
    /// @param _strategies - array of strategies addresses
    function handleDelegateStrategies(address[] _strategies) override external onlyStEverVault {
        tvm.rawReserve(_reserve(), 0);

        address[] handledStrategies;

        for (address strategy : _strategies) {

            if (!strategies.exists(strategy)) {
                strategies[strategy] = Strategy({
                        state: StrategyState.ACTIVE
                });
                deployedStrategies[strategy] = true;
                handledStrategies.push(strategy);
            }
        }

        IStEverVault(stEverVault).onStrategiesDelegationHandled{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }(clusterOwner, _nonce, handledStrategies);
    }
    /// @dev function for initialize remove cluster process
    /// @param _isPunish - flag for punish cluster owner
    function dropCluster(bool _isPunish) override external onlyStEverOwner {

        require(clusterState != ClusterState.REMOVING, ErrorCodesCluster.CLUSTER_IS_REMOVING);

        isPunished = _isPunish;
        clusterState = ClusterState.REMOVING;

        address[] strategiesForRemove;

        for ((address strategy, Strategy strategyInfo) : strategies) {
            if (strategyInfo.state != StrategyState.ACTIVE) {
                continue;
            }
            strategiesForRemove.push(strategy);
        }

        require(
            msg.value >= strategiesForRemove.length * StEverVaultGas.REMOVE_STRATEGY_RESERVE,
            ErrorCodesCluster.NOT_ENOUGH_VALUE
        );

        _removeStrategies(strategiesForRemove);
    }

    function getDetails() override external responsible returns (Details) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} Details(
            _nonce,
            stEverVault,
            stEverOwner,
            clusterOwner,
            requiredAssurance,
            maxStrategiesCount,
            currentVersion,
            strategyFactory,
            currentAssurance,
            uint32(strategies.keys().length),//currentStrategiesCount
            clusterState,
            isPunished,
            stEverTokenRoot,
            stEverTokenWallet
        );
    }

    /// @dev function for receiving tokens from stEverTokenWallet as an assurance
    function onAcceptTokensTransfer(
        address,
        uint128 _amount,
        address,
        address,
        address remainingGasTo,
        TvmCell
    ) override external {
        require(msg.sender == stEverTokenWallet, ErrorCodesCluster.NOT_ST_EVER_TOKEN_WALLET);
        tvm.rawReserve(_reserve(), 0);

        currentAssurance += _amount;

        emit AssuranceReceived(_amount, currentAssurance);

        remainingGasTo.transfer({value: 0, flag:MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }

    /// @dev function for setting new assurance amount
    /// @param _newRequiredAssurance - new assurance amount
    function setAssurance(uint128 _newRequiredAssurance) override external onlyStEverOwner minCallValue {
        tvm.rawReserve(_reserve(), 0);

        requiredAssurance = _newRequiredAssurance;

        emit SetAssuranceAmount(requiredAssurance);

        stEverOwner.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }
    /// @dev function for getting free assurance
    function freeAssurance() public view returns (uint128) {
        return currentAssurance >= requiredAssurance ? currentAssurance - requiredAssurance : 0;
    }
    /// @dev function for withdraw free assurance
    /// @param _amount - amount of assurance to withdraw
    function withdrawAssurance(uint128 _amount) override external onlyClusterOwner minCallValue {
        uint128 unlockedAssurance = freeAssurance();

        uint128 amountToWithdraw = math.min(_amount, unlockedAssurance);

        currentAssurance -= amountToWithdraw;

        tvm.rawReserve(_reserve(), 0);
        TvmCell empty;

        ITokenWallet(stEverTokenWallet).transfer{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }(
            amountToWithdraw,
            msg.sender,
            0,
            msg.sender,
            true,
            empty
        );

    }

    function upgrade(
        TvmCell _newCode,
        uint32 _newVersion,
        address _sendGasTo
    ) external virtual override onlyStEverVault {


        if (_newVersion == currentVersion) {
            tvm.rawReserve(_reserve(), 0);
            _sendGasTo.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
            return;
        }


        TvmBuilder mainBuilder;
        mainBuilder.store(stEverVault);
        mainBuilder.store(uint8(0));
        mainBuilder.store(_sendGasTo);

        TvmCell dummyPlatformCode;
        mainBuilder.store(dummyPlatformCode);


        TvmCell initialData = abi.encode(
            _nonce,
            stEverVault,
            clusterOwner
        );


        TvmCell constructorParams = abi.encode(
            _newVersion,
            currentVersion,
            requiredAssurance,
            maxStrategiesCount,
            strategyFactory,
            stEverTokenRoot,
            stEverOwner
        );

        mainBuilder.storeRef(initialData);
        mainBuilder.storeRef(constructorParams);
        uint32 currentStrategiesCount;
        TvmCell storageData = abi.encode(
            _nonce, //uint32
            stEverVault, //address
            stEverOwner, //address
            clusterOwner, //address

            requiredAssurance, //uint128
            maxStrategiesCount, //uint32
            currentVersion, //uint32
            strategyFactory, //address

            currentAssurance, //uint128
            currentStrategiesCount, //uint32
            clusterState, //ClusterState

            stEverTokenRoot, //address
            stEverTokenWallet, //address

            isPunished, //bool

            strategies, //mapping(address => Strategy)
            deployedStrategies //mapping(address => bool)
        );

        mainBuilder.storeRef(storageData);


        // set code after complete this method
        tvm.setcode(_newCode);
        // run onCodeUpgrade from new code
        tvm.setCurrentCode(_newCode);

        onCodeUpgrade(mainBuilder.toCell());
    }

    function onCodeUpgrade(TvmCell _upgradeData) private {
        tvm.resetStorage();
        tvm.rawReserve(_reserve(), 0);
        TvmSlice s = _upgradeData.toSlice();

        (,, address sendGasTo,) = s.decode(address,uint8,address, TvmCell);
        TvmCell initialData = s.loadRef();

        (
            _nonce,
            stEverVault,
            clusterOwner
        ) = abi.decode(
            initialData,
            (uint32, address, address)
        );

        TvmCell constructorParams = s.loadRef();

        (
            uint32 _current_version,
            uint32 _prevVersion,
            uint128 _assurance,
            uint32 _maxStrategiesCount,
            address _strategyFactory,
            address _stEverTokenRoot,
            address _stEverOwner
        ) = abi.decode(
            constructorParams,
            (
                uint32,
                uint32,
                uint128,
                uint32,
                address,
                address,
                address
            )
        );

        if (_current_version == _prevVersion) {
            _init(
                _current_version,
                _assurance,
                _maxStrategiesCount,
                _strategyFactory,
                _stEverTokenRoot,
                _stEverOwner
            );
        } else {
            TvmCell storageData = s.loadRef();
            currentVersion = _current_version;
            (
                _nonce,
                stEverVault,
                stEverOwner,
                clusterOwner,

                requiredAssurance,
                maxStrategiesCount,
                ,
                strategyFactory,

                currentAssurance,
                , //currentStrategiesCount
                clusterState,

                stEverTokenRoot,
                stEverTokenWallet,

                strategies,
                deployedStrategies
            ) = abi.decode(
            storageData,
                (
                uint32,
                address,
                address,
                address,

                uint128,
                uint32,
                uint32,
                address,

                uint128,
                uint32, // strategies count
                ClusterState,

                address,
                address,

                mapping(address => Strategy),
                mapping(address => bool)
                )
            );

        }


        sendGasTo.transfer({value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED});
    }
}
